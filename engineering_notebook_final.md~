
# Data Testing

These tests can be replicated by running `client/run_data_operations_test.py`. In this case, we create an instance of our Client class that bypasses the standard server-side API calls and manually defines our return type to be the amount of data within the packet. Within our set of sample queries, we found the following data measurements for our base operations: 

**Measurements:**

- **Custom Binary Protocol:**
  - `search_username`: 12 bytes
  - `create_account`: 44 bytes
  - `log_into_account`: 44 bytes
  - `log_out_of_account`: 39 bytes
  - `list_accounts`: 42 bytes
  - `display_conversation`: 41 bytes
  - `send_message`: 48 bytes
  - `read_messages`: 43 bytes
  - `delete_message`: 43 bytes
  - `delete_account`: 39 bytes

- **JSON Protocol:**
  - `search_username`: 54 bytes
  - `create_account`: 140 bytes
  - `log_into_account`: 142 bytes
  - `log_out_of_account`: 135 bytes
  - `list_accounts`: 147 bytes
  - `display_conversation`: 157 bytes
  - `send_message`: 168 bytes
  - `read_messages`: 149 bytes
  - `delete_message`: 152 bytes
  - `delete_account`: 131 bytes

In this case, the merit of using our custom wire protocol is clear, ranging from being **3x - 5x more compact** than our JSON system. One could argue that an advantage of the JSON system is the simplicity  

# 

---

## 02/05/2025 — Refining Data Models & Wire Protocol

**Focus:**
- Refined our data models based on initial designs.
- Laid out the preliminary structure for the wire protocol.

**Data Models:**

- **Messages:**
  - **Schema:**
    - `UID` (distinct integer)
    - `contents` (string)
    - `senderID` (int; corresponds to sender's userID)
    - `receiverID` (int; corresponds to receiver's userID)
    - `hasBeenRead` (bool)
    - `timestamp` (Unix format)
  - **Purpose:** Maintain unique identification, ordering, and status (read/unread).

- **Users:**
  - **Schema:**
    - `userID` (distinct integer)
    - `username` (string)
    - `hashedPassword` (64-character hexadecimal string from SHA-256)
    - `unreadMessages` (queue of message UIDs; considering deque/DLL for efficient pops/inserts)
    - `recentConversants` (list of userIDs ordered by message recency)
  - **Global Structures:**
    - **GlobalUserBase:** Hashmap mapping `userID` → `User` instance.
    - **GlobalUserTrie:** Ternary search tree (supports regex wildcards `*` and `?`) for username lookup.
    - **GlobalMessageBase:** Hashmap mapping `UID` → `Message` instance.
    - **GlobalConversations:** Hashmap mapping `(userID1, userID2)` → list (or DLL) of messages.

**Wire Protocol (Initial Outline):**

- **Packet Structure:**
  - **Header:** 
    - 2 bytes: Total packet length.
    - 1 byte: Message type.
    - 16 bytes: Session token.
  - **Payload:** Varies by operation.

- **Operations Covered:**
  - Create Account, Log In, List Accounts, Send Message, Read Messages, Delete Message, Delete Account.
  - Each operation will have defined request and response types (e.g., `0x01`–`0x0E`).

---

## 02/06/2025 — Session Token & Security Considerations

**Focus:**
- Designed a session token system.
- Evaluated security aspects of transmitting credentials.

**Session Token Design:**

- **Token Structure:**
  - 16-byte tokens.
  - Encapsulate metadata: `userID`, token value, and expiration (target lifetime: 30 minutes).
- **Management:**
  - Global mapping (`GlobalSessionTokens`) from `userID` to token instance.
  - Automatic token refresh upon expiration.
  
**Security Enhancements:**

- **Password Handling:**
  - Passwords are salted and hashed using SHA-256 *before* being transmitted.
- **Protocol Integration:**
  - All subsequent requests (after login) will include the session token for authentication.
  - Future improvements include enhanced error recovery for expired tokens.

---

## 02/07/2025 — Finalizing Wire Protocol Details

**Focus:**
- Finalized the structure and types for the custom binary wire protocol.

**Packet Composition:**

- **Header:**
  - **Length (2 bytes):** Total size of the packet.
  - **Message Type (1 byte):** Determines the operation.
  - **Session Token (16 bytes):** For authentication.
- **Payload:**
  - Varies depending on the operation (e.g., username lengths, hashed passwords, message content).

**Defined Message Types:**

- `0x01`: Create Account Request  
- `0x02`: Create Account Response  
- `0x03`: Login Request  
- `0x04`: Login Response  
- `0x05`: List Accounts Request  
- `0x06`: List Accounts Response  
- `0x07`: Send Message Request  
- `0x08`: Send Message Response  
- `0x09`: Read Messages Request  
- `0x0A`: Read Messages Response  
- `0x0B`: Delete Message Request  
- `0x0C`: Delete Message Response  
- `0x0D`: Delete Account Request  
- `0x0E`: Delete Account Response  

**Notes:**

- Utilizing Python's `struct.pack()` for efficient packing/unpacking.
- The protocol is designed to be extendable as new operations arise.

---

## 02/08/2025 — Protocol Measurements & Performance Considerations

**Focus:**
- Measured packet sizes for our custom binary protocol versus a JSON alternative.
- Assessed performance benefits.

**Measurements:**

- **Custom Binary Protocol:**
  - `search_username`: 12 bytes
  - `create_account`: 44 bytes
  - `log_into_account`: 44 bytes
  - `log_out_of_account`: 39 bytes
  - `list_accounts`: 42 bytes
  - `display_conversation`: 41 bytes
  - `send_message`: 48 bytes
  - `read_messages`: 43 bytes
  - `delete_message`: 43 bytes
  - `delete_account`: 39 bytes

- **JSON Protocol:**
  - `search_username`: 54 bytes
  - `create_account`: 140 bytes
  - `log_into_account`: 142 bytes
  - `log_out_of_account`: 135 bytes
  - `list_accounts`: 147 bytes
  - `display_conversation`: 157 bytes
  - `send_message`: 168 bytes
  - `read_messages`: 149 bytes
  - `delete_message`: 152 bytes
  - `delete_account`: 131 bytes

**Performance Insights:**

- The binary protocol significantly reduces overhead.
- Lower latency is expected due to smaller packet sizes.
- Decision: Proceed with the binary protocol for efficiency.

---

## 02/09/2025 — Testing & Integration of Core Functionalities

**Focus:**
- Began integration testing for core operations.
- Simulated client-server interactions using the defined protocol.

**Testing Highlights:**

- **Account Operations:**
  - Simulated client requests for account creation and login.
  - Verified correct session token generation and proper authentication flow.

- **Message Operations:**
  - Tested sending messages between users.
  - Ensured that messages are correctly stored in `GlobalConversations` and `GlobalMessageBase`.
  - Confirmed unread message handling by adding UIDs to the receiver’s queue.

- **Deletion Operations:**
  - Conducted tests on individual message deletion.
  - Verified that conversation deletion correctly iterates and removes all related messages.

**Outcome:**

- Core functionalities are operating as expected.
- Edge case handling and error conditions remain a focus for upcoming tests.

---

## 02/10/2025 — Server Endpoint & Client Integration Testing

**Focus:**
- End-to-end testing between server endpoints and a simulated client.
- Validated complete transaction flows per our wire protocol.

**Testing Activities:**

- **Server Endpoint Verification:**
  - Checked endpoints for create account, login, list accounts, send/read messages, and deletion operations.
  - Monitored packet exchanges to ensure adherence to the protocol.

- **Client Integration:**
  - Developed a minimal client simulation to interact with server endpoints.
  - Tested session token propagation across operations.

- **Identified Issues:**
  - Minor packet parsing issues under heavy load.
  - Plans to enhance logging and error handling in the next phase.

---

## 02/11/2025 — GUI Development & Enhanced User Interaction

**Focus:**
- Advanced the development of the graphical user interface.
- Integrated backend operations with the front-end for a seamless user experience.

**GUI Features Developed:**

- **Account Management:**
  - Users can create accounts or log in.
  - When a non-existent username is entered, the GUI prompts to create a new account.
  
- **Messaging Interface:**
  - Users can view conversation threads with individual contacts.
  - Real-time updates for new messages.
  - An “Unread Messages” section highlights unread messages and marks them as read once viewed.

- **Message Deletion:**
  - Implemented message selection (sent/received) with a click/un-click mechanism.
  - Confirmation dialogs ensure that users do not delete messages accidentally.

- **Account Deletion:**
  - Provides a clear “Are you sure?” prompt.
  - Warns users about cascading deletions (account and associated messages).

**User Experience Enhancements:**

- Clear, immediate feedback for every user action.
- Dynamic GUI updates reflecting session state and conversation changes.
- Enhanced error messaging to help guide the user through issues (e.g., invalid credentials).

---

## 02/12/2025 — Final Integration, Debugging, & Future Considerations

**Focus:**
- Final integration tests and debugging.
- Consolidation of all components into a stable beta-ready system.

**Integration Testing:**

- Conducted full end-to-end tests covering:
  - Account creation and login.
  - Sending, reading, and deleting messages.
  - Complete account deletion and its impact on conversations.
- Verified session token management:
  - Tokens refresh properly.
  - Expired tokens trigger a secure, automatic renewal process.

**Debugging Efforts:**

- Resolved packet parsing issues identified during heavy-load simulations.
- Improved error logging across server endpoints and the GUI.
- Ensured robust error handling for network interruptions.

**Documentation & Next Steps:**

- Updated protocol and design documentation to reflect final changes.
- Future optimizations:
  - Further refining DLL + hashmap structures for rapid deletion and list management.
  - Continued security reviews and performance optimizations.
- **Conclusion:**  
  - The system is stable and ready for demo day!
  - Plans for user testing and further enhancements based on feedback.

---


