import socket
import selectors
import types

HOST = '127.0.0.1'
PORT = 65432

sel = selectors.DefaultSelector()

def handle_packet(packet_bytes: str):
    """Process received packet data"""
    print(f"Client received: {packet_bytes}")
    return f"Client processed: {packet_bytes}"

def send_packet(packet_bytes: str, sock):
    """Send packet to server"""
    try:
        encoded_data = packet_bytes.encode('utf-8')
        sock.send(encoded_data)
    except Exception as e:
        print(f"Error sending packet: {e}")

def start_connection():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setblocking(False)
    sock.connect_ex((HOST, PORT))
    data = types.SimpleNamespace(inb=b"", outb=b"")
    events = selectors.EVENT_READ | selectors.EVENT_WRITE
    sel.register(sock, events, data=data)
    return sock

def service_connection(key, mask):
    sock = key.fileobj
    data = key.data

    if mask & selectors.EVENT_READ:
        recv_data = sock.recv(1024)
        if recv_data:
            response = handle_packet(recv_data.decode('utf-8'))
            send_packet(response, sock)
        else:
            print("Connection closed by server")
            sel.unregister(sock)
            sock.close()

if __name__ == "__main__":
    sock = start_connection()
    print(f"Connected to {(HOST, PORT)}")
    
    try:
        while True:
            events = sel.select(timeout=1)
            if events:
                for key, mask in events:
                    service_connection(key, mask)
            
            # Example: Send periodic message
            message = input("Enter message (or 'quit' to exit): ")
            if message.lower() == 'quit':
                break
            send_packet(message, sock)
            
    except KeyboardInterrupt:
        print("Client shutting down")
    finally:
        sel.close()
        sock.close()
